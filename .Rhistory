8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
summary(aov(lm.1))
summary.aov(lm.1)
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MSA = tab4[[1]][3,1]
MSA
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MSA = tab4[[1]][3,]
MSA
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MSA = tab4[[1]][1,3]
MSa
MSA
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MSA = tab4[[1]][1,3] ; MSB = tab4[[1]][2,3] ; MSAB = tab4[[1]][3,3]
rm(list=ls(all=TRUE))
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MS_A = tab4[[1]][1,3] ; MS_B = tab4[[1]][2,3] ; MS_AB = tab4[[1]][3,3]
MS_E = tab4[[1]][4,3]
c(MS_A, MS_B, MS_AB, MS_E)
n = 2 ; a = 10 ; b = 3
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MSE_E
n = 2 ; a = 10 ; b = 3
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MS_E
c(F_ratio_A, F_ratio_B, F_ratio_AB)
pf(F_ratio_A, df1 = a - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_B, df1 = b - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_AB, df1 = a*b-a-b-1, df2 = a*b*n - 1, lower.tail = F)
var_alpha = ( MS_A - MS_AB )/(b*n)
var_beta = ( MS_B - MS_AB )/(a*n)
var_alpha_beta = (MS_AB - MS_E)/n
var_epsilon = MS_E
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var(y)
var(y)
var_alpha + var_beta + var_alpha_beta + var_epsilon
pf(1/6, df1 = 2, df2 = 27, lower.tail = T)
rm(list=ls(all=TRUE))
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(1:3, times = 20))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MS_A = tab4[[1]][1,3] ; MS_B = tab4[[1]][2,3] ; MS_AB = tab4[[1]][3,3]
MS_E = tab4[[1]][4,3]
c(MS_A, MS_B, MS_AB, MS_E)
n = 2 ; a = 10 ; b = 3
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MS_E
c(F_ratio_A, F_ratio_B, F_ratio_AB)
pf(F_ratio_A, df1 = a - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_B, df1 = b - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_AB, df1 = a*b-a-b-1, df2 = a*b*(n-1), lower.tail = F)
var_alpha = ( MS_A - MS_AB )/(b*n)
var_beta = ( MS_B - MS_AB )/(a*n)
var_alpha_beta = (MS_AB - MS_E)/n
var_epsilon = MS_E
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var(y)
var_alpha + var_beta + var_alpha_beta + var_epsilon
# We see that they are approximately
cbind(y, part, oper)
var(y)
rm(list=ls(all=TRUE))
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, 51, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(rep(1:2,each=3),10))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MS_A = tab4[[1]][1,3] ; MS_B = tab4[[1]][2,3] ; MS_AB = tab4[[1]][3,3]
MS_E = tab4[[1]][4,3]
c(MS_A, MS_B, MS_AB, MS_E)
n = 3 ; a = 10 ; b = 2
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MS_E
c(F_ratio_A, F_ratio_B, F_ratio_AB)
pf(F_ratio_A, df1 = a - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_B, df1 = b - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_AB, df1 = a*b-a-b-1, df2 = a*b*(n-1), lower.tail = F)
var_alpha = ( MS_A - MS_AB )/(b*n)
var_beta = ( MS_B - MS_AB )/(a*n)
var_alpha_beta = (MS_AB - MS_E)/n
var_epsilon = MS_E
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var(y)
var_alpha + var_beta + var_alpha_beta + var_epsilon
# We see that they are approximately equal
n = 3 ; a = 10 ; b = 2
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MS_E
c(F_ratio_A, F_ratio_B, F_ratio_AB)
pf(F_ratio_A, df1 = a - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_B, df1 = b - 1, df2 = a*b - a - b - 1, lower.tail = F)
pf(F_ratio_AB, df1 = a*b-a-b+1, df2 = a*b*(n-1), lower.tail = F)
n = 3 ; a = 10 ; b = 2
# Order of F ratios & p-values: A, B, AB
F_ratio_A = MS_A/MS_AB
F_ratio_B = MS_B/MS_AB
F_ratio_AB = MS_AB/MS_E
c(F_ratio_A, F_ratio_B, F_ratio_AB)
pf(F_ratio_A, df1 = a - 1, df2 = a*b - a - b + 1, lower.tail = F)
pf(F_ratio_B, df1 = b - 1, df2 = a*b - a - b + 1, lower.tail = F)
pf(F_ratio_AB, df1 = a*b-a-b+1, df2 = a*b*(n-1), lower.tail = F)
rm(list=ls(all=TRUE))
y.m = matrix( c(
1,  50, 49, 50, 50, 48, 51,
2,  52, 52, 51, 51, 51, 51,
3,  53, 50, 50, 54, 52, 51,
4,  49, 51, 50, 48, 50, 51,
5,  48, 49, 48, 48, 49, 48,
6,  52, 50, 50, 52, 50, 50,
7,  51, 51, 51, NA, 50, 50,
8,  52, 50, 49, 53, 48, 50,
9,  50, 51, 50, 51, 48, 49,
10, 47, 46, 49, 46, 47, 48), ncol=7,byrow=T)
y = as.vector(t(y.m[,2:7]))
part = as.factor(rep(1:10, each = 6))
oper = as.factor(rep(rep(1:2,each=3),10))
lm.1 = lm(y~ part + oper + oper:part)
tab4 = summary.aov(lm.1) ; tab4
MS_A = tab4[[1]][1,3] ; MS_B = tab4[[1]][2,3] ; MS_AB = tab4[[1]][3,3]
MS_E = tab4[[1]][4,3]
c(MS_A, MS_B, MS_AB, MS_E)
install.packages('alr4')
?wblake
library(wblake)
library(alr4)
library(car)
?wblake
knitr::opts_chunk$set(echo = TRUE)
data(wblake)
wblake
dat <- wblake
str(dat)
plot(dat$Length, dat$Age)
library(tidyverse)
head(dat)
group_by(dat, Age) %>%
summarize(MeanLength = mean(Length))
meanL <- group_by(dat, Age) %>%
summarize(MeanLength = mean(Length))
plot(meanL$MeanLength, dat$Age)
plot(meanL$MeanLength, meanL$Age)
meanL <- group_by(dat, Age) %>%
summarize(SDLength = mean(Length))
plot(meanL$SDLength, meanL$Age)
plot(dat)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
library(alr4)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
suppressMessages(library(alr4))
suppressMessages(library(tidyverse))
str(BGSgirls)
dat <- select(BGSgirls, HT2, HT9, WT2, WT9, ST9, BMI18)
cor(BGSgirls)
print(cor(BGSgirls), 3)
pairs(dat, main = "Weight, Strength, and BMI", pch = 21, upper.panel = NULL)
dat <- select(BGSgirls, HT2, HT9, WT2, WT9, ST9, BMI18)
pairs(dat, main = "Weight, Strength, and BMI", pch = 21, upper.panel = NULL)
print(cor(BGSgirls), 3)
dat <- select(BGSgirls, HT2, HT9, WT2, WT9, ST9, BMI18)
pairs(dat, main = "Weight, Strength, and BMI", pch = 21, upper.panel = NULL)
print(cor(BGSgirls), 3)
dat <- select(BGSgirls, HT2, HT9, WT2, WT9, ST9, BMI18)
pairs(dat, main = "Weight, Strength, and BMI", pch = 21, upper.panel = NULL)
print(cor(dat), 3)
lm.1 = lm(BMI18~WT9+ST9, data = dat)
lm.2 = lm(BMI18~., data = dat)
summary(lm.1); summary(lm.2)
lm.1 = lm(BMI18~WT9+ST9, data = dat)
lm.2 = lm(BMI18~., data = dat)
summary(lm.1); summary(lm.2)
summary(anova(lm.1))
anova(lm.1)
anova(lm(BMI18~HT2+WT2+HT9, data = dat))
hist(lm.1$residuals)
plot(lm.1, which = 1)
x = 1:5
x[-1]
x = matrix(1:6, nrow = 2)
x
x %*% t(x)
x = 1:5
x * x
x %*% t(x)
4 %*% x
zeros(x %*% t(x))
install.packages('phonTools')
library(phonTools)
zeros(x)
zeros(x %*% t(x))
nrow(x %*% t(x))
y <- x %*% t(x)
y^2
y
sum(y)
sum(y, 2)
?sum
sumRow(y)
rowSum(y)
rowSums(y)
?replicate
replicate(2, rowSums(y))
replicate(rowSums(y), 2)
t(replicate(2, rowSums(y)))
install.packages('PopED')
library(PopED)
?eval
?feval
MAX(1:5)
feval("x + 5", 2)
feval('sin', 2)
feval('sin', pi/2)
1/0
is.infinite(1/0)
is.infinite(1/1)
4 + 4 * 2
zeros(x)
zeros(1,2)
zeros(dim(x))
dim(x,1)
library(phonTools)
zeros(x)
?zeros
zero(x)
dim(x)
size(x)
zeros(size(x))
zeros(1,1,1)
?return
zeros(1,5)
gg <- zeros(1,5)
is.vector(gg)
is.matrix(gg)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
suppressMessages(library(alr4))
suppressMessages(library(tidyverse))
hist(lm.2$residuals)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
suppressMessages(library(alr4))
suppressMessages(library(tidyverse))
dat <- select(BGSgirls, HT2, HT9, WT2, WT9, ST9, BMI18)
pairs(dat, main = "Weight, Strength, and BMI", pch = 21, upper.panel = NULL)
print(cor(dat), 3)
lm.1 = lm(BMI18~WT9+ST9, data = dat)
lm.2 = lm(BMI18~., data = dat)
summary(lm.1); summary(lm.2)
anova(lm(BMI18~HT2+WT2+HT9, data = dat))
hist(lm.2$residuals)
plot(lm.2, which = 1)
# estimate sigma as \sigma^2 = RSS(n - p -1)
summary(lm.2)
anova(lm.2)
# estimate sigma as \sigma^2 = RSS(n - p -1)
summary(lm.2)
p.vals <- summary(lm.2)$coefficients[2:6,4]
### Bonferroni
p.vals < 0.1/3
### Bonferroni
p.vals < 0.1/5
### Holm
sort(p.vals)
### Holm
sort.index(p.vals)
### Holm
p.vals
p.vals
sort.index(p.vals)
p.vals
sort(p.vals)
holm_p_val <- 0.1 / c(4, 5, 1, 3, 2)
sort(p.vals) < holm_p_val
### Benjamin-Hochberg
fdr <- 0.01/3*c(2, 3, 1, 5, 4)
sort(p.vals) < fdr
### Benjamin-Hochberg
fdr <- 0.01/5*c(2, 3, 1, 5, 4)
sort(p.vals) < fdr
sort(p.vals)
p.vals
holm_p_val <- 0.1 / c(3, 5, 4, 1, 2)
sort(p.vals) < holm_p_val
p.adjust.fdr <- p.adjust(p.vals, method = "fdr")
p.adjust.fdr
fdr
### Benjamin-Hochberg
fdr <- 0.1/5*c(2, 3, 1, 5, 4)
fdr
p.vals < p.adjust.fdr
### Benjamin-Hochberg
fdr <- 0.1/5*c(3, 5, 4, 1, 2)
sort(p.vals) < fdr
?any
library(tidyverse)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- select(dat, -EU_Sales, -JP_Sales, -Other_Sales, -Global_Sales)
# Remove observations played on very rare platforms
dat <- dat[!(dat$Platform %in% c("SCD", "WS","NG","TG16","3DO","GG","PCFX","GEN", "NES", "SNES")), ]
dat2 <- dat %>%
mutate(
ConsoleCompany = case_when(
Platform %in% c("PS", "PS2", "PS3", "PS4","PSP", "PSV") ~ "Sony",
Platform %in%  c("XB", "X360", "XOne") ~ "Xbox",
Platform %in% c("Wii", "WiiU","GB", "GBA", "GC", "DS", "3DS", "G") ~ "Nintendo",
Platform %in% c("PC") ~ "PC"
)
)
# Filter out observations with null values in Crtic_Score & User_Score
dat3 <- dat2[!is.na(dat2$User_Score),]
dat3 <- dat3[!is.na(dat3$Critic_Score),]
dat3$Sales <- dat3$NA_Sales
dat3 <- select(dat3, -NA_Sales)
dat4 <- dat3[2:nrow(dat3),]
hist(dat4$Sales, clim = c(0, 16), breaks = 1000)
boxplot(dat4$Sales)
# Continue cleaning
dat4 <- select(dat4, -Name)
cooklm <- lm(Sales~., data = dat4)
plot(cooklm, which = 4)
dat4 <- filter(dat4, Sales > 0.1)
setwd("~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis")
library(tidyverse)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- select(dat, -EU_Sales, -JP_Sales, -Other_Sales, -Global_Sales)
# Remove observations played on very rare platforms
dat <- dat[!(dat$Platform %in% c("SCD", "WS","NG","TG16","3DO","GG","PCFX","GEN", "NES", "SNES")), ]
dat2 <- dat %>%
mutate(
ConsoleCompany = case_when(
Platform %in% c("PS", "PS2", "PS3", "PS4","PSP", "PSV") ~ "Sony",
Platform %in%  c("XB", "X360", "XOne") ~ "Xbox",
Platform %in% c("Wii", "WiiU","GB", "GBA", "GC", "DS", "3DS", "G") ~ "Nintendo",
Platform %in% c("PC") ~ "PC"
)
)
# Filter out observations with null values in Crtic_Score & User_Score
dat3 <- dat2[!is.na(dat2$User_Score),]
dat3 <- dat3[!is.na(dat3$Critic_Score),]
dat3$Sales <- dat3$NA_Sales
dat3 <- select(dat3, -NA_Sales)
dat4 <- dat3[2:nrow(dat3),]
hist(dat4$Sales, clim = c(0, 16), breaks = 1000)
boxplot(dat4$Sales)
# Continue cleaning
dat4 <- select(dat4, -Name)
cooklm <- lm(Sales~., data = dat4)
plot(cooklm, which = 4)
dat4 <- filter(dat4, Sales > 0.1)
plot(cooklm, which = 5)
hist(dat4$Sales)
hist(log10(dat4$Sales))
library(MASS)
boxcox(cooklm)
plot(dat4$Sales)
plot(cooklm, which = 2)
plot(cooklm, which = 3)
source('~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis/video game sales.R', echo=TRUE)
source('~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis/video game sales.R', echo=TRUE)
source('~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis/video game sales.R', echo=TRUE)
source('~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis/video game sales.R', echo=TRUE)
library(tidyverse)
library(MASS)
rm(list = ls())
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- select(dat, -EU_Sales, -JP_Sales, -Other_Sales, -Global_Sales)
View(dat)
str(dat)
# Select only NA_sales from the sales
dat <- dat %>%
select(-EU_Sales, -JP_Sales, -Other_Sales, -Global_Sales)
dat$EU_Sales
colnames(dat)
source('~/STAT 423/VideoGGGGG/VideoGameSalesAnalysis/video game sales.R', echo=TRUE)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- dat %>%
select(-EU_Sales)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- dat %>%
select(- EU_Sales)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- dat %>%
tidyverse::select(-EU_Sales, -JP_Sales)
dat <- read.csv("Video_Game_Sales_as_of_Jan_2017.csv", stringsAsFactors = F)
# Select only NA_sales from the sales
dat <- dat %>%
select(-EU_Sales, -JP_Sales)
